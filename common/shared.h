/**********************************************************************************************************************
 * \file shared.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SHARED_H
#define SHARED_H

#if defined(__cplusplus)
extern "C" {
#endif

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
enum
{
    FROM_CM0_TO_CM7_0 = 0,
    FROM_CM0_TO_CM7_1,
    FROM_CM7_0_TO_CM0,
    FROM_CM7_1_TO_CM0,
    SHARED_NUM
};

enum
{
    R_0x40004090 = 0,           /* R 0x40004090 */
    W_0x40004090,               /* W 0x40004090 */
    R_0x40201004,               /* R 0x40201004 */
    W_0x40201004,               /* W 0x40201004 */
    R_0x40201020,               /* R 0x40201020 */
    W_0x40201020,               /* W 0x40201020 */
    R_0x40201300,               /* R 0x40201300 */
    W_0x40201300,               /* W 0x40201300 */
    R_0x402013C8,               /* R 0x402013C8 */
    W_0x402013C8,               /* W 0x402013C8 */
    R_0x402013CC,               /* R 0x402013CC */
    W_0x402013CC,               /* W 0x402013CC */
    R_0x40201400,               /* R 0x40201400 */
    W_0x40201400,               /* W 0x40201400 */
    RW_NUM,
    CM7_0_REQ_ECCCHECK = RW_NUM,/* ECC Check */
    REQ_NUM,
};

#define DELAY_BETWEEN_READ_MS   (100)
#define MSG_ACCESS_OK           ("Successfully accessed to target memory..")
#define MSG_ECCCHECK_DONE       ("ECC check done..")

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
CY_SECTION(".shared") uint32_t g_shared[SHARED_NUM];

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/**********************************************************************************************************************
 * Function Name: doRequestedAccess
 * Summary:
 *  Function to process access requested by CM0+.
 *  Depending on the command passed as parameter, the process to be performed is selected.
 * Parameters:
 *  req - command requested by CM0+
 * Return:
 *  result(string)
 **********************************************************************************************************************
 */
char* doRequestedAccess(uint8_t req)
{
    /* Access to protected address */
    if (req < RW_NUM)
    {
        const struct
        {
            volatile uint32_t   *addr;          /* address to be accessed */
            bool                write;          /* if true, perform write access */
        }
        ACCESS_TBL[RW_NUM] =
        {
            {(volatile uint32_t *)0x40004090, false},
            {(volatile uint32_t *)0x40004090, true},
            {(volatile uint32_t *)0x40201004, false},
            {(volatile uint32_t *)0x40201004, true},
            {(volatile uint32_t *)0x40201020, false},
            {(volatile uint32_t *)0x40201020, true},
            {(volatile uint32_t *)0x40201300, false},
            {(volatile uint32_t *)0x40201300, true},
            {(volatile uint32_t *)0x402013C8, false},
            {(volatile uint32_t *)0x402013C8, true},
            {(volatile uint32_t *)0x402013CC, false},
            {(volatile uint32_t *)0x402013CC, true},
            {(volatile uint32_t *)0x40201400, false},
            {(volatile uint32_t *)0x40201400, true},
        };
        volatile uint32_t val = *(ACCESS_TBL[req].addr);
        if (ACCESS_TBL[req].write == true)
        {
            *(ACCESS_TBL[req].addr) = val;
        }
    }
#ifdef CORE_NAME_CM7_0
    /* CM7_0_REQ_ECCCHECK */
    else
    {
        /*
         * For information on how to implement ECC fault injection, please refer to the following CE
         * https://github.com/Infineon/mtb-t2g-example-fault-report-configuration
         */
         return (MSG_ECCCHECK_DONE);
    }
#endif
    return (MSG_ACCESS_OK);
}

#if defined(__cplusplus)
}
#endif

#endif /* SHARED_H */

/* [] END OF FILE */
